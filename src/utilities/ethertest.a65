; Ethernet controller test program for the C65GS

; Include C64 BASIC program load header

	 .word $0801
	 .org $0801

	 .scope
	 .word _next, 10                       ; Next line and current line number
	 .byte $97, "2,0:", $9e, " 2014", $AA, "65",0      ; POKE 2,0 : SYS 2014+65
_next:	 .word 0

iter1:	 .byte 0

	 .checkpc 2079
	 .advance 2079

programentrypoint:
	
	; Enable C65GS io
	lda #$47
	sta $d02f
	lda #$53
	sta $D02f

	; Fast CPU
	lda #65
	sta 0

	; Reset ethernet
	lda #$0
	sta $d6e0
	lda #1
	sta $d6e0
	
	lda #<msg_startup
	ldy #>msg_startup
	jsr $ab1e

	; Set our MAC address to 40:40:40:40:40:40
	ldx #5
	lda #$40
mac1:	sta $d6e9,x
	dex
	bpl mac1

	; Map ethernet registers at $6000 - $7FFF

	; Ethernet buffer really lives $FFDE000 - $FFDEFFF, so select $FF megabyte section for MAP LO
	lda #$ff
	ldx #$0f
	ldy #$00
	ldz #$00
	map
	eom

	; now enable mapping of $DE000-$DFFFF at $6000
	; MAPs are offset based, so we need to subtract $6000 from the target address
	; $DE000 - $6000 = $D8000
	lda #$80
	ldx #$8d
	ldy #$00
	ldz #$00
	map
	eom

	; Ethernet registers should now be visible from $6000 - $6FFF
	; read buffer will be at $6800 - $6FFF
fliptest:
	lda $d6e0
	sta $0410
	and #$40
	sta $0410
	beq noflip


	; make sure ethernet transceiver is on and not generating IRQs
	; (we will poll it).
	; also make sure that we acknowledge the last received packet so that the
	; ethernet controller knows it can receive.
	lda $d6e1
	lsr
	and #$02
	ora #$01
	sta $d6e1
	jmp fliptest

noflip:

	lda #$17
	sta $d018

packetloop:

	jsr $ffe4
	sta $0427
	cmp #$20
	beq sendapacket

	lda $d6e1
	and #$20
	beq packetloop
	; clear eth RX signal, and leave ethernet tranceiver on
	; and make last used RX buffer visible
	lda $d6e1
	and #$04
	lsr
	ora #$01
	sta $d6e1

	jmp noshowpacket

	; to clear the screen
	lda #$93
	jsr $ffd2

	; Show contents of latest packet
	ldx #$00
loop1:	lda $6800,x
	sta $0428,x
	lda $6900,x
	sta $0528,x
	lda $6a00,x
	sta $0628,x
	lda $6ac8,x
	sta $0700,x
	inx
	bne loop1

	; Print length of packet
	lda $6801
	and #$0f
	ldx $6800
	jsr $BDCD   
	lda #$20
	jsr $FFD2   

noshowpacket:
	; Is it an IPv4 packet?
	lda $6810
	cmp #$45
	bne noticmpping
	; Is it an ICMP packet?
	lda $6819
	cmp #$11
	beq isudp
	cmp #$01
	bne noticmpping
	; Check ICMP message type
	lda $6824
	cmp #$08
	bne noticmpping
	; Check last quad of IP addres is 255 (broadcast) or 65 (us)
	lda $6823
	sta $0420
	cmp #$ff
	beq isicmpping
	cmp #65
	bne noticmpping 

isicmpping:
	; It's a ping packet.
	jsr send_icmp_reply	

isudp:
	; Is the packet for us (last octet of IP == 65)?
	lda $6823
	sta $0408
	cmp #65
	bne nottftp

	; Does the port number = 69 for TFTP?
	lda $6827
	cmp #<69
	bne nottftp
	lda $6826
	cmp #>69
	bne nottftp

	jsr process_tftp_packet

nottftp:
noticmpping:
	; Here we want to check that $680E - $6817 =
	; 08 06 00 01 08 00 06 04 00 01
	;
	inc $044e

	ldx #$09
arploop0:
	lda $680e,x
	cmp arptemplate,x
	bne notarp
	dex
	bpl arploop0

	inc $044f

	; yes, we have ARP
	; check that IP address asked for ends in .65
	;
	lda $682b
	cmp #65
	bne notarp

	; ok, so we have an ARP request.
	; now we need to build the ARP reply and send it.
	; We should copy the sender's 

	inc $0426 ; XXX for debug

	; set output packet size
	; 6+6+2 bytes ethernet header + 28 bytes of ARP reply = 42
	lda #<42
	sta $d6e2
	lda #>42
	sta $d6e3

	; copy fixed ARP fields (we will overwrite some later)
	; (note that TX buffer lacks 2 byte RX buffer header)
	ldx #$14
arploop1:
	lda $6802,x
	sta $6800,x
	dex
	bpl arploop1
	; Copy ethernet source to ethernet destination in TX buffer
	; Set our mac address in ethernet source address field in TX buffer
	ldx #$05
arploop2:
	lda $6808,x    ; requestors mac from RX ethernet header
	sta $6800,x    ; requestors mac into TX ethernet header
	lda #$40
	sta $6806,x    ; our mac in ethernet header
	sta $6816,x    ; our mac in ARP payload
	dex
	bpl arploop2
	; set packet as ARP reply
	lda #$02     ; $02 = reply, $01 = request
	sta $6815

	ldx #$03
	; copy requested IP address into reply IP address field
arploop3:
	lda $6828,x
	sta $681c,x
	dex
	bpl arploop3
	; copy requestors MAC+IP into target MAC+IP fields
	ldx #9
arploop4:
	lda $6818,x
	sta $6820,x
	dex
	bpl arploop4
	
	; packet should now all be ready - hit TX button
	lda #$01
	sta $d6e4	

	; Fall through to rest of packet parser (even though it won't pass
	; these tests -- it just saves a few bytes of code).

notarp:


	jmp packetloop

; ----------------------------------------------------------------------------------------

process_tftp_packet:	

	lda $682d
	sta $0409
	cmp #$01
	bne not_tftp_read_req
	jmp tftp_read_req
not_tftp_read_req:

	cmp #$02
	bne not_tftp_put

	jmp tftp_write_req

not_tftp_put:
	cmp #$04
	bne not_tftp_ack

	jmp tftp_ack_seen

not_tftp_ack:

	inc $0403
	rts

tftp_write_req:

	; Reset file sequence number
	lda #<0
	sta seq_num
	lda #>0
	sta seq_num+1

	jsr print_src_ip
	
	lda #<msg_write_req
	ldy #>msg_write_req
	jsr $ab1e

	; Copy source UDP port for inserting into reply packets.
	; (means we can have only one transfer in progress at a time.)
	lda $6824
	sta remote_port
	lda $6824+1
	sta remote_port+1

	; Show filename being requested
	lda #<$682e
	ldy #>$682e
	jsr $ab1e

	lda #$0d
	jsr $ffd2

	; Copy filename to low memory
	ldy #63
wfc1:	lda $682e,y
	sta $4000,y
	dey
	bpl wfc1

	; Setup transfer area and filename
	ldy #>$4000
	lda #$2e
	sta $d640
	nop

	; Look for file on FAT file system via hypervisor calls
	lda #$34
	sta $d640
	nop
	bcs wfile_exists

wfile_not_found:
	; Prepare a TFTP error response

	; Try to create file (name already setup, of course)
	; Trick is we don't know the size! So just lie and say
	; 800KB for now, which works for D81 files.
	; dos_mkfile() trap for now allocates in units of 512KB
	; anyway.  We will need to implement dos_truncfile() to
	; reduce length of files (and ideally free the released
	; space) at some point. But for now, we will use some
	; carnal knowledge of how everything works to make it
	; work in a basic manner.
	ldz #$10   ; $10 x 64KB = 1MB
	lda #$1e
	sta $d640
	nop
	ldz #0

	; Insert error message
	ldx #58
wfnf1:	lda tftp_error_file_not_found_bytes,x
	sta $380c,x
	dex
	bpl wfnf1

	lda remote_port+0
	sta $3824+0
	lda remote_port+1
	sta $3824+1

	; Now setup common parts
	jsr ether_setup_addresses
	jsr ip_swap_addresses
	
	; Set packet length
	lda #<70
	sta $d6e2
	lda #>70
	sta $d6e3

	jsr ip_calc_checksum
	jsr udp_calc_checksum

	jsr ether_tx_packet
	rts

wfile_exists:

	; Close all open files
	lda #$22
	sta $d640
	nop

	; Try to open this file
	lda #$18
	sta $d640
	nop
	bcs wfile_opened	

	; Insert error message
	ldx #58
wfno1:	lda tftp_error_cant_open_file_bytes,x
	sta $380c,x
	dex
	bpl wfno1

	lda remote_port+0
	sta $3824+0
	lda remote_port+1
	sta $3824+1

	; Now setup common parts
	jsr ether_setup_addresses
	jsr ip_swap_addresses
	
	; Set packet length
	lda #<70
	sta $d6e2
	lda #>70
	sta $d6e3

	jsr ip_calc_checksum
	jsr udp_calc_checksum

	jsr ether_tx_packet
	rts

wfile_opened:

	; File is opened (either following creation, or because
	; it already exists.)
	; We should now send an ACK with block #0 to indicate to the
	; sender that we are ready to receive the blocks for this file.

	rts

tftp_read_req:

	; Reset file sequence number
	lda #<0
	sta seq_num
	lda #>0
	sta seq_num+1

	jsr print_src_ip
	
	lda #<msg_read_req
	ldy #>msg_read_req
	jsr $ab1e

	; Copy source UDP port for inserting into reply packets.
	; (means we can have only one transfer in progress at a time.)
	lda $6824
	sta remote_port
	lda $6824+1
	sta remote_port+1

	; Show filename being requested
	lda #<$682e
	ldy #>$682e
	jsr $ab1e

	lda #$0d
	jsr $ffd2

	; Copy filename to low memory
	ldy #63
fc1:	lda $682e,y
	sta $4000,y
	dey
	bpl fc1

	; Setup transfer area and filename
	ldy #>$4000
	lda #$2e
	sta $d640
	nop

	; Look for file on FAT file system via hypervisor calls
	lda #$34
	sta $d640
	nop
	bcs file_exists

file_not_found:
	; Prepare a TFTP error response

	; Insert error message
	ldx #58
fnf1:	lda tftp_error_file_not_found_bytes,x
	sta $380c,x
	dex
	bpl fnf1

	lda remote_port+0
	sta $3824+0
	lda remote_port+1
	sta $3824+1

	; Now setup common parts
	jsr ether_setup_addresses
	jsr ip_swap_addresses
	
	; Set packet length
	lda #<70
	sta $d6e2
	lda #>70
	sta $d6e3

	jsr ip_calc_checksum
	jsr udp_calc_checksum

	jsr ether_tx_packet
	rts

file_exists:

	; Close all open files
	lda #$22
	sta $d640
	nop

	; Try to open this file
	lda #$18
	sta $d640
	nop
	bcs file_opened	

	; Insert error message
	ldx #58
fno1:	lda tftp_error_cant_open_file_bytes,x
	sta $380c,x
	dex
	bpl fno1

	lda remote_port+0
	sta $3824+0
	lda remote_port+1
	sta $3824+1

	; Now setup common parts
	jsr ether_setup_addresses
	jsr ip_swap_addresses
	
	; Set packet length
	lda #<70
	sta $d6e2
	lda #>70
	sta $d6e3

	jsr ip_calc_checksum
	jsr udp_calc_checksum

	jsr ether_tx_packet
	rts

file_opened:

	; Now loop through reading the file and sending the packets

	; FALL THROUGH
tftp_send_next_data_block:

	; Bump sequence number
	lda seq_num+0
	clc
	adc #1
	sta seq_num+0
	lda seq_num+1
	adc #0
	sta seq_num+1

	; Actually, we just get the first packet of data, and send that.
	; The other blocks (and any retransmissions) will happen in the
	; main packet loop
	lda #$1a
	sta $d640
	nop

	; Number of bytes read are reported in $YYXX
	; so file away for later.
	stx data_bytes+0
	sty data_bytes+1

	jsr tftp_resend_data_block
	rts

tftp_resend_data_block:

	ldx #32
fd1:	lda tftp_data_packet_bytes,x
	sta $380c,x
	dex
	bpl fd1

	; Update IP packet length field
	lda data_bytes+0
	clc
	adc #<$0020
	sta $3811
	lda data_bytes+1
	adc #>$0020
	sta $3810

	; Set UDP remote port number
	lda remote_port+0
	sta $3824+0
	lda remote_port+1
	sta $3824+1

	; Set correct UDP payload length
	lda data_bytes+0
	clc
	adc #<12
	sta $3826+1
	lda data_bytes+1
	adc #>12
	sta $3826+0

	; Insert packet sequence number
	lda seq_num
	sta $382c+1
	lda seq_num+1
	sta $382c+0

	jsr ether_setup_addresses
	jsr ip_swap_addresses

	; Copy SD card sector buffer into packet
	jsr copy_sd_buffer_to_packet

	lda $3826+1
	clc
	adc #<$0022         ; IP+UDP Packet length overhead
	sta $d6e2
	lda $3826+0
 	adc #>$0022         ; IP+UDP Packet length overhead
	sta $d6e3
	jsr ip_calc_checksum
	jsr udp_calc_checksum

	jsr ether_tx_packet

	rts

tftp_ack_seen:
	lda $682f
	cmp seq_num+0
	bne tftp_do_resend
	lda $682e
	cmp seq_num+1
	bne tftp_do_resend
	jmp tftp_send_next_data_block
tftp_do_resend:
	jmp tftp_resend_data_block

udp_calc_checksum:
	; clear checksum field, as UDP checksum is optional
	lda #$00
	sta $3828
	sta $3829
	sta checksum+0
	sta checksum+1

	rts

ip_calc_checksum:
	; clear checksum field
	lda #$00
	sta $3818
	sta $3819
	sta checksum+0
	sta checksum+1

	ldx #0
	clc
cl1:
	lda $380e,x
	jsr checksum_add_left
	inx
	lda $380e,x
	jsr checksum_add_right
	inx
	cpx #20
	bne cl1

	lda checksum+0
	eor #$FF
	sta $3818
	lda checksum+1
	eor #$FF
	sta $3819

	rts

checksum_add_left:
	adc checksum+0
	sta checksum+0
	lda checksum+1
	adc #0
	sta checksum+1
	rts

checksum_add_right:
	adc checksum+1
	sta checksum+1
	lda checksum+0
	adc #0
	sta checksum+0
	rts

checksum:
	.word 0

seq_num:
	.word 0

data_bytes:
	.word 0

tftp_error_file_not_found_bytes:
	; TFTP file not found error packet contents
	.byte $08, $00    ; boring old-style ethernet frame
	.byte $45, $00    ; IPv4
	.byte $00, $38    ; IP packet length
	.byte $86, $4b    ; Identification field (not used)
	.byte $40, $00    ; Don't fragment. Not a fragment
	.byte $40, $11    ; UDP protocol
	.word 0           ; IP header checksum 
	.word 0,0         ; Source IP address
	.word 0,0         ; Destination IP address
	.byte $00, $45    ; Source port
	.byte $FF, $FF    ; Destination port 
	.byte $00, $24    ; UDP packet Length
	.byte $00, $00    ; UDP checksum
	.byte $00,$05     ; TFTP Error opcode
	.byte $00,$01     ; File not found
	.byte "? FILE NOT FOUND ERROR",$00
	.byte $00         ; pad to byte pair

tftp_error_cant_open_file_bytes:
	; TFTP file not found error packet contents
	.byte $08, $00    ; boring old-style ethernet frame
	.byte $45, $00    ; IPv4
	.byte $00, $38    ; IP packet length
	.byte $86, $4b    ; Identification field (not used)
	.byte $40, $00    ; Don't fragment. Not a fragment
	.byte $40, $11    ; UDP protocol
	.word 0           ; IP header checksum 
	.word 0,0         ; Source IP address
	.word 0,0         ; Destination IP address
	.byte $00, $45    ; Source port
	.byte $FF, $FF    ; Destination port 
	.byte $00, $24    ; UDP packet Length
	.byte $00, $00    ; UDP checksum
	.byte $00,$05     ; TFTP Error opcode
	.byte $00,$01     ; File not found
	.byte "? CANT OPEN FILE ERROR",$00
	.byte $00         ; pad to byte pair


tftp_data_packet_bytes:
	; TFTP file not found error packet contents
	.byte $08, $00    ; boring old-style ethernet frame
	.byte $45, $00    ; IPv4
	.byte $02, $20    ; IP packet length
	.byte $86, $4b    ; Identification field (not used)
	.byte $40, $00    ; Don't fragment. Not a fragment
	.byte $40, $11    ; UDP protocol
	.word 0           ; IP header checksum 
	.word 0,0         ; Source IP address
	.word 0,0         ; Destination IP address
	.byte $00, $45    ; Source port
	.byte $FF, $FF    ; Destination port 
	.byte $02, $00    ; UDP packet Length
	.byte $00, $00    ; UDP checksum
	.byte $00, $03    ; TFTP Data packet
	.word 0           ; Packet sequence number


msg_read_req:
	.byte " rEQUESTING FILE ",0

msg_write_req:
	.byte " wRITING FILE ",0

msg_startup:
	.byte $93,$11,"mega65 tftp sERVER v0.0.1",$0d
	.byte "ip ADDRESS IS X.X.X.65, WHERE X.X.X.X",$0d
	.byte "IS YOUR NETWORK PREFIX.",$0d
	.byte 0

remote_port:
	.word 0

; ----------------------------------------------------------------------------------------

print_src_ip:
	lda #0
	ldx $681c
	jsr $bdcd
	lda #$2e
	jsr $ffd2

	lda #0
	ldx $681d
	jsr $bdcd
	lda #$2e
	jsr $ffd2

	lda #0
	ldx $681e
	jsr $bdcd
	lda #$2e
	jsr $ffd2

	lda #0
	ldx $681f
	jsr $bdcd

	rts

ip_swap_addresses:
	; Set source IP address as destination, and vice versa
	ldx #$3
ml4:	lda $681c,x
	sta $381e,x

	lda $6820,x
	sta $381a,x

	dex
	bpl ml4

	; And set last octet of source address to be us (we assume we are always on a /24 aka class c net)
	lda #65
	sta $381d

	rts

; ----------------------------------------------------------------------------------------
ether_copy_packet:
	; Copy from $FFDE802 where ethernet RX buffer
	; lives to $3800
	lda #>dmalist_e2
	sta $d701
	lda #$00
	sta $d704
	lda #<dmalist_e2
	sta $d705
	rts

dmalist_e2:
	.byte $0b ; Option $0B = F018B job
	.byte $80,$FF ; Option: Source MB = $FF
	.byte $81,$00 ; Option: Dest MB = $00
	.byte $00 ; End of options

	.byte $00 ; Command = copy
	.word $0400 ; Copy 1KB

	.word $e802 ; Copy from $xxxE802
	.byte $0D   ; Copy from $xxDxxxx

	.word $3800 ; Copy to $xxx3800
	.byte $00   ; Copy to $xx0xxxx

	.byte $00   ; No sub-command
	.word $0000 ; Modulo = $0000 (not used)


ether_packet_to_tx_buffer:
	; Copy from $3800 to $FFDE800 where ethernet buffer
	; lives.
	lda #>dmalist_e1
	sta $d701
	lda #$00
	sta $d704
	lda #<dmalist_e1
	sta $d705
	rts

dmalist_e1:
	.byte $0b ; Option $0B = F018B job
	.byte $80,$00 ; Option: Source MB = $00
	.byte $81,$FF ; Option: Dest MB = $FF
	.byte $00 ; End of options

	.byte $00 ; Command = copy
	.word $0400 ; Copy 1KB

	.word $3800 ; Copy from $xxx3800
	.byte $00   ; Copy from $xx0xxxx

	.word $e800 ; Copy to $xxxE800
	.byte $0D   ; Copy to $xxDxxxx

	.byte $00   ; No sub-command
	.word $0000 ; Modulo = $0000 (not used)


copy_sd_buffer_to_packet:
	; Copy from $FFD6E00 to $382e
	; lives.
	lda #>dmalist_e3
	sta $d701
	lda #$00
	sta $d704
	lda #<dmalist_e3
	sta $d705
	rts

dmalist_e3:
	.byte $0b ; Option $0B = F018B job
	.byte $80,$FF ; Option: Source MB = $FF
	.byte $81,$00 ; Option: Dest MB = $00
	.byte $00 ; End of options

	.byte $00 ; Command = copy
	.word $0200 ; Copy 512 bytes

	.word $6E00 ; Copy from $xxx6E00
	.byte $0D   ; Copy from $xx0xxxx

	.word $382E ; Copy to $xxxE800
	.byte $00   ; Copy to $xxDxxxx

	.byte $00   ; No sub-command
	.word $0000 ; Modulo = $0000 (not used)



ether_tx_packet:

	; copy packet to TX area
	; XXX - Use DMA to decrease latency
	jsr ether_packet_to_tx_buffer

	lda $d6e4
	and #$06
	sta $0418

	; TX packet
	lda #$01
	sta $d6e4

txwaitloop:
	lda $D6E4	
	and #$06
	sta $0402
	beq txready
	inc $0401
	jmp txwaitloop

txready:
	; send packet 2nd time
	lda #$01
	sta $d6e4

	rts

ether_setup_addresses:
	; Set our MAC address (hardwired to 40:40:40:40:40:40 for now)
	lda #$40
	ldx #5
ml1:	sta $3806,x
	dex
	bpl ml1
	
	; Copy source MAC address to destination position
	ldx #5
ml2:	lda $6808,x ; skip 2 bytes for len etc, then 6 bytes of dest mac addr (broadcast)
	sta $3800,x
	dex
	bpl ml2

	rts

send_icmp_reply:
	; Copy packet body etc, which we will patch in a moment
	; Use DMA to decrease latency
	jsr ether_copy_packet

	jsr ether_setup_addresses

	; Set ICMP type to reply
	lda #$00
	sta $3822

	jsr ip_swap_addresses

	; XXX Update ICMP check sum
	lda $3832
	clc
	adc #$08
	sta $3832
	; XXX Update IP checksum
	lda $6823 ; last octet of dest address
	sec
	sbc #65
	clc
	adc $3819
	sta $3819
	lda $3818
	adc #0
	sta $3818

	; Copy length from received packet
	lda $6800
	sta $d6e2
	lda $6801
	and #$0f
	sta $d6e3

	jsr ether_tx_packet

	inc $d020
	inc $0400

	jmp packetloop

sendapacket:
	; set packet length
	lda #<packet_length
	sta $d6e2
	lda #>packet_length
	sta $d6e3

	; copy packet body
	ldx #$00
l1:	lda sample_packet,x
	sta $6800,x
	inx
	bne l1

	; Change single byte in frame
	lda $d012
	sta $6830

	; TX packet
	lda #$01
	sta $d6e4

	inc $d020

	jmp packetloop

	.alias packet_length 68

sample_packet:
	.byte $ff,$ff,$ff,$ff,$ff,$ff,$41,$41,$41,$41,$41,$41,$08,$00,$0f,$10
	.byte $11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f,$20
	.byte $21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f,$30
	.byte $31,$32,$33,$34,$00,$01,8,5,12,12,15,32,23,15,18,12
	.byte 4,33,$2e,$2e

arptemplate:
	.byte $08,$06,$00,$01,$08,$00,$06,$04,$00,$01

	.scend

	.outfile "utilities/ethertest.prg"
