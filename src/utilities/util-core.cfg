#
# Inside Core Utility CL65 config file
#
# This places stack and BSS above HYPPO between $C000-$CFFF
# and code below hyppo, between $0801-7FFF.
#
# Keep in mind that this limits the stack, so you need to keep
# a strict call discipline (no big recursions!)
#
# The config will make sure that an error is raise if the limits
# are exceeded.
#
FEATURES {
    STARTADDRESS: default = $0801;
}
SYMBOLS {
    __LOADADDR__:  type = import;
    __EXEHDR__:    type = import;
    __PRGSTART__:  type = weak, value = $0801;
    __STACKSIZE__: type = weak, value = $400;
    __HYPPO__:     type = weak, value = $8000; # HYPPO uses $8000-$BFFF
    __HYPPOEND__:  type = weak, value = $C000;
    __HIMEM__:     type = weak, value = $D000;
    # we define MAIN_START and _SIZE directly, to place top of stack at $CFFF
    __MAIN_START__: type = weak, value = $0801;
    __MAIN_SIZE__:  type = weak, value = $c7fe; # this is $CFFF for top of stack
}
MEMORY {
    ZP:       file = "", define = yes, start = $0002,           size = $001A;
    LOADADDR: file = %O,               start = %S - 2,          size = $0002;
    HEADER:   file = %O, define = yes, start = %S,              size = $000D;
    # CODE is our area for the program, and it is limited by HYPPO at $8000
    CODE:     file = %O,               start = __HEADER_LAST__, size = __HYPPO__ - __HEADER_LAST__;
    BSS:      file = "",               start = __HYPPOEND__,    size = __HIMEM__ - __HYPPOEND__ - __STACKSIZE__ - 1;
}
SEGMENTS {
    ZEROPAGE: load = ZP,       type = zp;
    LOADADDR: load = LOADADDR, type = ro;
    EXEHDR:   load = HEADER,   type = ro;
    STARTUP:  load = CODE,     type = ro;
    LOWCODE:  load = CODE,     type = ro,  optional = yes;
    CODE:     load = CODE,     type = ro;
    RODATA:   load = CODE,     type = ro;
    DATA:     load = CODE,     type = rw;
    INIT:     load = CODE,     type = rw;
    ONCE:     load = CODE,     type = ro,  define   = yes;
    BSS:      load = BSS,      type = bss, define   = yes;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
